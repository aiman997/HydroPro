version: '3.9'

services:
  users:
    build:
      context: ./
      dockerfile: base/Python/Dockerfile
      args:
        service_dir: "users"
    init: true
    tty: true
    container_name: users
    restart: unless-stopped
    volumes:
      - ./users/bin:/app/bin
      - ./base/Python/lib:/app/lib
    environment:
      PORT: "${METRICS_PORT}"
      DATABASE: "${DB}"
      LOG_LEVEL: "${LOG_LEVEL}"
      REDIS: "${REDIS}"
    depends_on:
      - redis
      - postgres

  plant:
    build:
      context: ./
      dockerfile: base/Python/Dockerfile
      args:
        service_dir: "plant"
    init: true
    tty: true
    container_name: plant
    restart: unless-stopped
    volumes:
      - ./plant/bin:/app/bin
      - ./base/Python/lib:/app/lib
    environment:
      PORT: "${METRICS_PORT}"
      DATABASE: "${DB}"
      LOG_LEVEL: "${LOG_LEVEL}"
      REDIS: "${REDIS}"
    depends_on:
      - redis
      - postgres
  auth:
    build:
      context: ./
      dockerfile: base/Python/Dockerfile
      args:
        service_dir: "auth"
    init: true
    tty: true
    container_name: auth
    restart: unless-stopped
    volumes:
      - ./auth/bin:/app/bin
      - ./base/Python/lib:/app/lib
    environment:
      PORT: "${METRICS_PORT}"
      DATABASE: "${DB}"
      LOG_LEVEL: "${LOG_LEVEL}"
      REDIS: "${REDIS}"
    depends_on:
      - redis
      - postgres

  farmer:
    build:
      context: ./
      dockerfile: base/Python/Dockerfile
      args:
        service_dir: "farmer"
    init: true
    tty: true
    container_name: farmer
    restart: unless-stopped
    volumes:
      - ./farmer/bin:/app/bin
      - ./base/Python/lib:/app/lib
    environment:
      DATABASE: "${DB}"
      LOG_LEVEL: "${LOG_LEVEL}"
      REDIS: "${REDIS}"
    depends_on:
      - redis
      - postgres

  rpi:
    build:
      context: ./
      dockerfile: base/Python/Dockerfile
      args:
        service_dir: "rpi"
    init: true
    tty: true
    container_name: rpi
    restart: unless-stopped
    volumes:
      - ./rpi/bin:/app/bin
      - ./base/Python/lib:/app/lib
    environment:
      DATABASE: "${DB}"
      LOG_LEVEL: "${LOG_LEVEL}"
      REDIS: "${REDIS}"
      RPI_IP: ${RPI_IP}
      RPI_PORT: ${RPI_PORT}
      PUSH_GATEWAY_ADDR: "${PUSH_GATEWAY_ADDR}"
      READING_DURATION: "${READING_DURATION}"
      SLEEP_DURATION: "${SLEEP_DURATION}"
    depends_on:
      - redis
      - postgres

  metrics:
    build:
      context: ./
      dockerfile: base/Python/Dockerfile
      args:
        service_dir: "metrics"
    init: true
    tty: true
    container_name: metrics
    restart: unless-stopped
    volumes:
      - ./metrics/bin:/app/bin
      - ./base/Python/lib:/app/lib
    environment:
      PORT: "${METRICS_PORT}"
      DATABASE: "${DB}"
      LOG_LEVEL: "${LOG_LEVEL}"
      REDIS: "${REDIS}"
    depends_on:
      - redis
      - postgres

  wsapi:
    container_name: wsapi
    restart: unless-stopped
    build:
      context: ./wsapi
      dockerfile: ./Dockerfile
    ports:
      - 8000:8000
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      REDIS: "${REDIS}"
    depends_on:
      - redis
    volumes:
      - ./base/Python/lib:/app/lib
      - ./wsapi/main.py:/app/main.py
      - ./wsapi/manger.py:/app/manger.py
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 5m
      timeout: 5s
      retries: 3
      start_period: 15s

  caddy:
    container_name: caddy
    restart: unless-stopped
    build:
      context: ./caddy
      dockerfile: ./Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./data/caddy_data:/data
      - ./data/caddy_config:/config
    depends_on:
      - wsapi
    environment:
      PROXY_BACKEND: ${PROXY_BACKEND}
      PROXY_PORT: ${PROXY_PORT}

  frontend:
    container_name: frontend
    build:
      context: frontend
    ports:
      - 8001:8001
    stdin_open: true
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    depends_on:
      - wsapi

  nginx:
    container_name: nginx
    build: nginx/
    restart: always
    ports:
      - "8002:8002"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    deploy:
      mode: replicated
      replicas: 1

  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  prometheus-push-gateway:
    container_name: prometheus-push-gateway
    image: prom/pushgateway
    ports:
      - 9091:9091

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

  postgres:
    container_name: postgres
    restart: always
    image: postgres:alpine
    volumes:
      - ./hydrodb/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./hydrodb/data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=hydro@pgadmin.com
      - PGADMIN_DEFAULT_PASSWORD=NxVhhyU9p3
      - POSTGRES_USER=postgres
      - POSTGRES_PW=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGADMIN_MAIL=${PGADMIN_MAIL}
      - PGADMIN_PW=${PGADMIN_PW}
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    restart: always

volumes:
  prom_data:
  caddy_data:
  caddy_config:
